
# Note: This boostrap file is used to get the config of the application on startup
# It happens BEFORE the application.properties file is loaded

# Precedence:
# External Config Server application specific configuration file
# External Config Server global configuration file
# Local application.properties file
# Local boostrap.properties file

# Note: Even though the boostrap.properties file has a lower configuration precedence
# than the application.properties file, the boostrap file runs first on application
# startup in order to get the external configuration data!




#------- External config example data -------

# Note: This value will get overridden by the configuration file from the config-server
external.property=App_specific_config_from_local_application_boostrap_file

# Note: This value has a lower precedence than the local application.properties file
local.custom.property=local_bootstrap_file_value





# Note: There are two ways to find the Configuration Server
# The 'config method' requires you to point to the EXACT location of the config server
# The 'discovery method' requires you to point to the EXACT location of the discovery server. This method
# allows the config server to use a dynamic ip address. The discovery server will already be using a known ip.

# NOTE: The application will try to connect to localhost:8888 by default if no method is used to set the config
#       server location!



# Config method:
# spring.application.name=config-client-app
# spring.cloud.config.uri=http://localhost:8888



# Discovery method:

# Set the location of the discovery server
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Tell the app to use the discovery server to find the config server
spring.cloud.config.discovery.enabled=true




















